#include<iostream>
#include<cmath>
using namespace std;
const long double g3 = 1.7320508075688772935274463415059;
const long double g2 = 1.4142135623730950488016887242096;
const int m = 100;//space空间大小m*m*m
const int n = 200;//photo图片大小n*n
class pl {//位置 
public:
	double x, y, z;//位置
	pl(double xx=0,double yy=0,double zz=0)
	{
		x = xx, y = yy, z = zz;
	}
	friend double howlong(const pl& a, const pl& b)//两点距离
	{
		return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z));
	}
	pl operator+(const pl& a)const//移动
	{
		return pl(x + a.x, y + a.y, z + a.z);
	}
};
class co {//颜色 0~255
public:
	double re, gr, bl;//红，绿，蓝
	double light;//亮度
	co(const double ina = 0, const double inb = 0, const double inc = 0, const double inlight = 0) {// 初始化
		re = ina;
		gr = inb;
		bl = inc;
		light=inlight;
	}
	co changelight(const double in)
	{
		light=in;
	}
	
	co operator+(const co& next)const {// +  把颜色涂深
		int a = 255, b = 255, c = 255;
		if (re + next.re < a) a = re + next.re;
		if (gr + next.gr < b) b = gr + next.gr;
		if (bl + next.bl < c) c = bl + next.bl;
		return co(a, b, c);
	}

	co operator-(const co& next)const {// -  把颜色减弱
		int a = 0, b = 0, c = 0;
		if (re - next.re > a) a = re - next.re;
		if (gr - next.gr > b) b = gr - next.gr;
		if (bl - next.bl > c) c = bl - next.bl;
		return co(a, b, c);
	}
	co operator*(const double& in)const {// *  把颜色改至in倍
		int a = 255, b = 255, c = 255;
		if (re * in < a) a = re * in;
		if (gr * in < b) b = gr * in;
		if (bl * in < c) c = bl * in;
		return co(a, b, c);
	}
	co operator/(const double& next)const {// /  把颜色改至1/in倍  ，这似乎没什么用
		return co(re / next, gr / next, bl / next);
	}
};
co a[m][m][m];//颜色空间
bool b[m][m][m];//存储点是否已用
pl fzs;//成像起始点  左上 
pl fys;//成像起始点  右上 
pl fzx;//成像起始点  左下 
pl fyx;//成像起始点  右下 
co f[n][n];//photo  存成像结果
double x, y;//向上的角度，水平角度（右为正）
pl move;//中点位移
inline bool point(pl a, co b)//涂点
{
	int x = int(a.x);
	int y = int(a.y);
	int z = int(a.z);
	if((x<=m&&x>=0)&&(y<=m&&y>=0)&&(z<=m&&z>=0)) return 0;//出界了
	::a[x][y][z] = b;//涂色
	::a[x + 1][y][z] = b;
	::a[x][y + 1][z] = b;
	::a[x][y][z + 1] = b;
	::a[x + 1][y + 1][z] = b;
	::a[x + 1][y][z + 1] = b;
	::a[x + 1][y + 1][z] = b;
	::a[x + 1][y + 1][z + 1] = b;
	::b[x][y][z] = 1;//标记已用
	::b[x + 1][y][z] = 1;
	::b[x][y + 1][z] = 1;
	::b[x][y][z + 1] = 1;
	::b[x][y + 1][z + 1] = 1;
	::b[x + 1][y][z + 1] = 1;
	::b[x + 1][y + 1][z] = 1;
	::b[x + 1][y + 1][z + 1] = 1;
	return 1;//成功
}

inline void line(pl a, pl b,co c)
{
	double x, y, z, x1, y1, z1;
	double ll = sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z));
	x = (a.x - b.x) / ll;
	y = (a.y - b.y) / ll;
	z = (a.z - b.z) / ll;
	x1 = a.x, y1 = a.y, z1 = a.z;
	for (int i=0;i<=ll;i++)
	{
		if(!point(pl(x1, y1, z1), c))  break;//出界
		x1 += x, y1 += y, z1 += z;
	}
	return;
}
void face(pl a, pl b, pl c,co d)
{
	pl a1, b1;
	double ll = howlong(a, c);//延ac重复作ab
	pl tmp = pl((a.x - c.x) / ll, (a.y - c.y) / ll, (a.z - c.z) / ll);
	for (int i = 0; i <= ll; i++)
	{
		a1 = a, b1 = b;
		line(a1, b1, d);
		a1 = a1 + tmp;
		b1 = b1 + tmp;
	}
	return;
}
co getpoint(pl from,pl to)
{
	double x, y, z, x1, y1, z1;
	double ll = sqrt((from.x - to.x) * (from.x - to.x) + (from.y - to.y) * (from.y - to.y) + (from.z - to.z) * (from.z - to.z));
	int signx=from.x>to.x?1:-1;//判断方向，向外还是向内
	int signy=from.y>to.y?1:-1;
	int signz=from.z>to.z?1:-1;
	x = (from.x - to.x) / ll;
	y = (from.y - to.y) / ll;
	z = (from.z - to.z) / ll;
	x1 = from.x, y1 = from.y, z1 = from.z;
	while ( (signx>0&&x1>0||signx<0&&x1>m)&&  (signy>0&&y1>0||signy<0&&y1>m)&&  (signz>0&&z1>0||signz<0&&z1>m) )//没出界时，向内认为没出
	{
	
		if(b[int(x1)][int(y1)][int(z1)])//find a colour,return a colour
		{
			x1 += x, y1 += y, z1 += z;
			double re,gr,bl;
			int xx=(int)x1,yy=(int)y1,zz=(int)z1;
			re=a[xx][yy][zz].re+a[xx+1][yy][zz].re+a[xx][yy+1][zz].re+a[xx][yy][zz+1].re
			   +a[xx][yy+1][zz+1].re+a[xx+1][yy][zz+1].re+a[xx+1][yy+1][zz].re+a[xx+1][yy+1][zz+1].re;
			gr=a[xx][yy][zz].gr+a[xx+1][yy][zz].gr+a[xx][yy+1][zz].gr+a[xx][yy][zz+1].gr
			   +a[xx][yy+1][zz+1].gr+a[xx+1][yy][zz+1].gr+a[xx+1][yy+1][zz].gr+a[xx+1][yy+1][zz+1].gr;
			bl=a[xx][yy][zz].bl+a[xx+1][yy][zz].bl+a[xx][yy+1][zz].bl+a[xx][yy][zz+1].bl
			   +a[xx][yy+1][zz+1].bl+a[xx+1][yy][zz+1].bl+a[xx+1][yy+1][zz].bl+a[xx+1][yy+1][zz+1].bl;
			return(co(re,gr,bl));
		}
		
		x1 += x, y1 += y, z1 += z;
	}
	return co(0,0,0);
}
void getphoto1(pl d)//from point to face.1,2,3是面位置，d是点位置
{
	pl a,b,c;//抄一下void face
	a=fzs, b=fzx, c=fys;
	pl a1, b1;
	double ll = howlong(a, c);
	pl tmp = pl((a.x - c.x) / ll, (a.y - c.y) / ll, (a.z - c.z) / ll);
	for (int j = 0; j <= ll; j++)
	{
		a1 = a, b1 = b;
		
		{//抄一下void line
			pl a=a1,b=a1;
			double x, y, z, x1, y1, z1;
			double ll = sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y) + (a.z - b.z) * (a.z - b.z));
			x = (a.x - b.x) / ll;
			y = (a.y - b.y) / ll;
			z = (a.z - b.z) / ll;
			x1 = a.x, y1 = a.y, z1 = a.z;
			for (int i=0;i<=ll;i++)
			{
			f[j][i]=getpoint(d, pl(x1, y1, z1));
			x1 += x, y1 += y, z1 += z;
			}
		}
		
		a1 = a1 + tmp;
		b1 = b1 + tmp;
	}
	return;
}

void freshphoto()
{
	cout<<"?/n";
}

int main()
{
	cin.get();
	cin.get();

	return 0;
}
